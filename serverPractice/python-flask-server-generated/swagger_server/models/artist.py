# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Artist(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, artist_name: str=None, artist_genre: str=None, albums_recorded: int=None, username: str=None):  # noqa: E501
        """Artist - a model defined in Swagger

        :param artist_name: The artist_name of this Artist.  # noqa: E501
        :type artist_name: str
        :param artist_genre: The artist_genre of this Artist.  # noqa: E501
        :type artist_genre: str
        :param albums_recorded: The albums_recorded of this Artist.  # noqa: E501
        :type albums_recorded: int
        :param username: The username of this Artist.  # noqa: E501
        :type username: str
        """
        self.swagger_types = {
            'artist_name': str,
            'artist_genre': str,
            'albums_recorded': int,
            'username': str
        }

        self.attribute_map = {
            'artist_name': 'artist_name',
            'artist_genre': 'artist_genre',
            'albums_recorded': 'albums_recorded',
            'username': 'username'
        }
        self._artist_name = artist_name
        self._artist_genre = artist_genre
        self._albums_recorded = albums_recorded
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'Artist':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Artist of this Artist.  # noqa: E501
        :rtype: Artist
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artist_name(self) -> str:
        """Gets the artist_name of this Artist.


        :return: The artist_name of this Artist.
        :rtype: str
        """
        return self._artist_name

    @artist_name.setter
    def artist_name(self, artist_name: str):
        """Sets the artist_name of this Artist.


        :param artist_name: The artist_name of this Artist.
        :type artist_name: str
        """

        self._artist_name = artist_name

    @property
    def artist_genre(self) -> str:
        """Gets the artist_genre of this Artist.


        :return: The artist_genre of this Artist.
        :rtype: str
        """
        return self._artist_genre

    @artist_genre.setter
    def artist_genre(self, artist_genre: str):
        """Sets the artist_genre of this Artist.


        :param artist_genre: The artist_genre of this Artist.
        :type artist_genre: str
        """

        self._artist_genre = artist_genre

    @property
    def albums_recorded(self) -> int:
        """Gets the albums_recorded of this Artist.


        :return: The albums_recorded of this Artist.
        :rtype: int
        """
        return self._albums_recorded

    @albums_recorded.setter
    def albums_recorded(self, albums_recorded: int):
        """Sets the albums_recorded of this Artist.


        :param albums_recorded: The albums_recorded of this Artist.
        :type albums_recorded: int
        """

        self._albums_recorded = albums_recorded

    @property
    def username(self) -> str:
        """Gets the username of this Artist.


        :return: The username of this Artist.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Artist.


        :param username: The username of this Artist.
        :type username: str
        """

        self._username = username
